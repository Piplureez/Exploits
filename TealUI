local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Teal UI", "GrapeTheme")

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local Player = game.Players.LocalPlayer
local PlayerModel = Player.Character or Player.Character:Wait()

local Mouse = Player:GetMouse()
local Camera = game.Workspace.CurrentCamera

local Main = Window:NewTab("Universal")
local Settings = Window:NewTab("Settings")

local MainExploits = Main:NewSection("Universal Exploits")
local PlayerSettings = Settings:NewSection("Player Settings")

local InfiniteJump = false

MainExploits:NewToggle("Infinite Jump", "If this is on, you can jump in the air!", function(state)
    if state then
        
		InfiniteJump = true
		
		function InputBegan(Input, GameProcessedEvent)
			
			if InfiniteJump == false then return nil end
			
			if GameProcessedEvent then return nil end
			
			if Input.KeyCode == Enum.KeyCode.Space then
					
				PlayerModel:WaitForChild("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
					
			end
				
		end
		
		UserInputService.InputBegan:Connect(InputBegan)
		
    else
        
		InfiniteJump = false
		
    end
end)

local Noclip = false

MainExploits:NewToggle("Noclip", "If this is on, you can walk through walls!", function(state)
    if state then
		
		Noclip = true
		
		function Stepped()
			
			if Noclip == false then return nil end
			
			for i, v in pairs(PlayerModel:GetChildren()) do
				
				if v:IsA("BasePart") then v.CanCollide = false end
				
			end
			
		end
		
		RunService.Stepped:Connect(Stepped)
		
    else
        
		for i, v in pairs(PlayerModel:GetChildren()) do
				
			if v:IsA("BasePart") then v.CanCollide = true end
				
		end
		
		Noclip = false
		
    end
end)

local ClickToTeleport = false

MainExploits:NewToggle("Click To Teleport", "If this is on, you can click to teleport!", function(state)
    if state then
        
		ClickToTeleport = true
		
		function InputBegan(Input, GameProcessedEvent)
			
			if ClickToTeleport == false then return nil end
			
			if GameProcessedEvent then return nil end
			
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				
				PlayerModel:WaitForChild("HumanoidRootPart").CFrame = Mouse.Hit
				
			end
				
		end
		
		UserInputService.InputBegan:Connect(InputBegan)
		
    else
        
		ClickToTeleport = false
		
    end
end)

MainExploits:NewToggle("Flashlight", "If this is on, you can see in the dark!", function(state)
    if state then
		
        local NewLight = Instance.new("SpotLight")
		NewLight.Range = 100
		NewLight.Brightness = 3
		NewLight.Face = Enum.NormalId.Front
		NewLight.Parent = PlayerModel.Head
		
    else
		
        local SpotLight = PlayerModel.Head:FindFirstChild("SpotLight")
		
		if SpotLight then
			
			SpotLight:Destroy()
			
		end
		
    end
end)

local FlyToggle = false
local FlySpeed = 30

MainExploits:NewToggle("Fly", "If this is on, you can fly!", function(state)

if state then

local BV = Instance.new("BodyVelocity")
BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
BV.Parent = PlayerModel.HumanoidRootPart

FlyToggle = true

local Fly = false

function InputBegan(Input, GameProcessedEvent)			
	
	if GameProcessedEvent == true then return end
	if FlyToggle == false then return end
	
	if Input.KeyCode == Enum.KeyCode.W then
		
		Fly = true
		
		while Fly == true do
		
		PlayerModel.HumanoidRootPart.BodyVelocity.Velocity = Camera.CFrame.LookVector * FlySpeed
			
			wait(0.1)
			
		end
			
	elseif Input.KeyCode == Enum.KeyCode.S then
		
		Fly = true
		
		while Fly == true do
		
		PlayerModel.HumanoidRootPart.BodyVelocity.Velocity = Camera.CFrame.LookVector * -FlySpeed
			
			wait(0.1)
			
		end
			
	elseif Input.KeyCode == Enum.KeyCode.D then

		Fly = true

		while Fly == true do

			PlayerModel.HumanoidRootPart.BodyVelocity.Velocity = Camera.CFrame.RightVector * FlySpeed

			wait(0.1)
			
		end
		
	elseif Input.KeyCode == Enum.KeyCode.A then

		Fly = true

		while Fly == true do

			PlayerModel.HumanoidRootPart.BodyVelocity.Velocity = Camera.CFrame.RightVector * -FlySpeed

			wait(0.1)

		end
			
	end
	
end

function InputEnded(Input)
	
	if FlyToggle == false then return end
	if Fly == false then return end
	
	if Input.KeyCode == Enum.KeyCode.W or Input.KeyCode == Enum.KeyCode.S or Input.KeyCode == Enum.KeyCode.D or Input.KeyCode == Enum.KeyCode.A then
		
		Fly = false
		PlayerModel.HumanoidRootPart.BodyVelocity.Velocity = Vector3.new(0,0,0)
		
	end
	
end
			
UserInputService.InputBegan:Connect(InputBegan)
UserInputService.InputEnded:Connect(InputEnded)

else
	
	PlayerModel.HumanoidRootPart.BodyVelocity:Destroy()
	FlyToggle = false
	
end
end)

PlayerSettings:NewSlider("Walk Speed", "Adjust your speed!", 500, 16, function(s)
	
    PlayerModel.Humanoid.WalkSpeed = s
	
end)
  
PlayerSettings:NewSlider("Jump Power", "Adjust how high you jump!", 350, 50, function(s)
	
	PlayerModel.Humanoid.UseJumpPower = true
    PlayerModel.Humanoid.JumpPower = s
	
end)

PlayerSettings:NewSlider("Fly Speed", "Adjust how fast you fly!", 500, 30, function(s)
	
	FlySpeed = s
	
end)
end)
